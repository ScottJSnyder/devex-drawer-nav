{"version":3,"sources":["history.js","NavigationList.js","views/Inbox.js","views/Trash.js","views/SentMail.js","views/Spam.js","DxComponent.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","navigation","id","text","icon","filePath","NavigationList","loadView","e","history","push","addedItems","props","stateHandler","isDrawerOpen","Fragment","items","width","selectionMode","onSelectionChanged","this","React","PureComponent","Inbox","Component","Trash","SentMail","Spam","DxComponent","renderList","newState","setState","state","buttonOptions","onClick","widget","options","location","minSize","height","revealMode","openedStateMode","render","opened","exact","path","component","App","className","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iVAEeA,gBCETC,EAAa,CACf,CAAEC,GAAI,EAAGC,KAAM,QAASC,KAAM,UAAWC,SAAU,SACnD,CAAEH,GAAI,EAAGC,KAAM,YAAaC,KAAM,QAASC,SAAU,aACrD,CAAEH,GAAI,EAAGC,KAAM,QAASC,KAAM,QAASC,SAAU,SACjD,CAAEH,GAAI,EAAGC,KAAM,OAAQC,KAAM,UAAWC,SAAU,SAoBvCC,E,4MAhBXC,SAAW,SAACC,GACRC,EAAQC,KAAKF,EAAEG,WAAW,GAAGN,UAC7B,EAAKO,MAAMC,aAAa,CAAEC,cAAc,K,uDAGxC,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,IAAD,CACIC,MAAOf,EACPgB,MAAO,IACPC,cAAc,SACdC,mBAAoBC,KAAKb,gB,GAZhBc,IAAMC,e,SCFpBC,E,uKALP,OACI,0C,GAHQF,IAAMG,WCOXC,E,uKALP,OACI,0C,GAHQJ,IAAMG,WCOXE,E,uKALP,OACI,8C,GAHWL,IAAMG,WCOdG,E,uKALP,OACI,yC,GAHON,IAAMG,WCuEVI,E,kDArDX,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IAaViB,WAAa,WAET,OACI,kBAAC,EAAD,CAAgBhB,aAFC,SAACiB,GAAD,OAAc,EAAKC,SAASD,OAZjD,EAAKE,MAAQ,CACTlB,cAAc,GAElB,EAAKmB,cAAgB,CACjB7B,KAAM,OACN8B,QAAS,WACL,EAAKH,SAAS,CAAEjB,cAAe,EAAKkB,MAAMlB,iBATnC,E,qDAsBf,OACI,kBAAC,IAAMC,SAAP,KACI,kBAAC,UAAD,CAASb,GAAG,WACR,kBAAC,OAAD,CACIiC,OAAO,WACPC,QAAShB,KAAKa,cACdI,SAAS,YAEjB,kBAAC,SAAD,CACIC,QAAS,GACTC,OAAQ,IACRC,WAAW,SACXC,gBAAgB,UAChBC,OAAQtB,KAAKS,WACbc,OAAQvB,KAAKY,MAAMlB,cACnB,yBAAKZ,GAAG,QACJ,kBAAC,IAAD,CAAQO,QAASA,GACb,6BACI,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,IAAIC,UAAWvB,IACjC,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,SAASC,UAAWvB,IACtC,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,aAAaC,UAAWpB,IAC1C,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,QAAQC,UAAWnB,IACrC,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,SAASC,UAAWrB,a,GA7C5CJ,IAAMG,WCPjBuB,E,uKAPP,OACI,yBAAKC,UAAU,OACX,kBAAC,EAAD,W,GAJExB,aCSEyB,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASC,MACvB,2DCZNC,IAASX,OACP,kBAAC,IAAMY,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b7e1fe9.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\"\r\n \r\nexport default createBrowserHistory()","import React from \"react\";\r\nimport List from \"devextreme-react/list\";\r\nimport history from \"./history\";\r\n \r\nconst navigation = [\r\n    { id: 1, text: \"Inbox\", icon: \"message\", filePath: \"inbox\" },\r\n    { id: 2, text: \"Sent Mail\", icon: \"check\", filePath: \"sent-mail\" },\r\n    { id: 3, text: \"Trash\", icon: \"trash\", filePath: \"trash\" },\r\n    { id: 4, text: \"Spam\", icon: \"mention\", filePath: \"spam\" }\r\n];\r\n \r\nclass NavigationList extends React.PureComponent {\r\n    loadView = (e) => {\r\n        history.push(e.addedItems[0].filePath);\r\n        this.props.stateHandler({ isDrawerOpen: false });\r\n    }\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <List\r\n                    items={navigation}\r\n                    width={200} \r\n                    selectionMode=\"single\"\r\n                    onSelectionChanged={this.loadView} />\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default NavigationList;","import React from \"react\";\r\n \r\nclass Inbox extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>Inbox</div>\r\n        );\r\n    }\r\n}\r\nexport default Inbox;","import React from \"react\";\r\n \r\nclass Trash extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>Trash</div>\r\n        );\r\n    }\r\n}\r\nexport default Trash;","import React from \"react\";\r\n \r\nclass SentMail extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>Sent Mail</div>\r\n        );\r\n    }\r\n}\r\nexport default SentMail;","import React from \"react\";\r\n \r\nclass Spam extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>Spam</div>\r\n        );\r\n    }\r\n}\r\nexport default Spam;","import React from \"react\";\r\n \r\nimport \"devextreme/dist/css/dx.common.css\";\r\nimport \"devextreme/dist/css/dx.light.css\";\r\nimport \"./DxComponent.css\";\r\n \r\nimport { Drawer } from \"devextreme-react/drawer\";\r\nimport { Toolbar, Item } from \"devextreme-react/toolbar\";\r\nimport NavigationList from \"./NavigationList\";\r\n \r\nimport { Router, Route } from \"react-router-dom\";\r\n \r\nimport Inbox from \"./views/Inbox\";\r\nimport Trash from \"./views/Trash\";\r\nimport SentMail from \"./views/SentMail\";\r\nimport Spam from \"./views/Spam\";\r\n \r\nimport history from \"./history\";\r\n \r\nclass DxComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n \r\n        this.state = {\r\n            isDrawerOpen: false\r\n        };\r\n        this.buttonOptions = {\r\n            icon: \"menu\",\r\n            onClick: () => {\r\n                this.setState({ isDrawerOpen: !this.state.isDrawerOpen });\r\n            }\r\n        };\r\n    }\r\n \r\n    renderList = () => {\r\n        const stateHandler = (newState) => this.setState(newState);\r\n        return (\r\n            <NavigationList stateHandler={stateHandler} />\r\n        );\r\n    }\r\n \r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Toolbar id=\"toolbar\">\r\n                    <Item \r\n                        widget=\"dxButton\" \r\n                        options={this.buttonOptions} \r\n                        location=\"before\" />\r\n                </Toolbar>\r\n                <Drawer\r\n                    minSize={37}\r\n                    height={250}\r\n                    revealMode=\"expand\"\r\n                    openedStateMode=\"overlap\"\r\n                    render={this.renderList}\r\n                    opened={this.state.isDrawerOpen} >\r\n                    <div id=\"view\">\r\n                        <Router history={history}>\r\n                            <div>\r\n                                <Route exact path=\"/\" component={Inbox} />\r\n                                <Route exact path=\"/inbox\" component={Inbox} />\r\n                                <Route exact path=\"/sent-mail\" component={SentMail} />\r\n                                <Route exact path=\"/spam\" component={Spam} />\r\n                                <Route exact path=\"/trash\" component={Trash} />\r\n                            </div>\r\n                        </Router>\r\n                    </div>\r\n                </Drawer>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\nexport default DxComponent;","import React, { Component } from \"react\";\nimport DxComponent from \"./DxComponent\";\n \nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <DxComponent />\n            </div>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}